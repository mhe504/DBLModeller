rule 'createSegment'
	from ccompilationUnit sf
	to kdm::kdm::Segment 
	queries
		s : //#statements;
		cst : //#CST;
	mappings
		model = s;
		model = cst;
end_rule

rule 'createCodeModel'
	from CST cst
	to kdm::code::CodeModel
	queries
		f: /cst/#file;
	mappings
		name = "Datatypes";
		codeElement = f;

end_rule

rule 'createTypes'
	from file f
	to kdm::code::LanguageUnit
	queries
	mappings
		name = "Abstract SQL Types";
		codeElement = execute createBinary f;
		codeElement = execute createBoolean f;
		codeElement = execute createChar f;
		codeElement = execute createDate f;
		codeElement = execute createDecimial f;
		codeElement = execute createFloat f;
		codeElement = execute createInteger f;
		codeElement = execute createString f;
		codeElement = execute createSequence f;
end_rule

rule 'createSequence'
	from file f
	to kdm::code::SequenceType
	queries
	mappings
		name = "Auto-Increment";
		itemUnit = execute createSequenceValue f;
end_rule

rule 'createSequenceValue'
	from file f
	to kdm::code::ItemUnit
	queries
	mappings
		name = "Value;DBLM_REF:type,Datatypes.Abstract SQL Types.Integer,model.codeElement.codeElement;";
end_rule

rule 'createBoolean'
	from file f
	to kdm::code::BooleanType
	queries
	mappings
		name = "Boolean";
end_rule

rule 'createChar'
	from file f
	to kdm::code::CharType
	queries
	mappings
		name = "Character";
end_rule

rule 'createString'
	from file f
	to kdm::code::StringType
	queries
	mappings
		name = "Character String";
end_rule

rule 'createFloat'
	from file f
	to kdm::code::FloatType
	queries
	mappings
		name = "Floating-point Number";
end_rule

rule 'createInteger'
	from file f
	to kdm::code::IntegerType
	queries
	mappings
		name = "Integer";
end_rule

rule 'createDecimial'
	from file f
	to kdm::code::DecimalType
	queries
	mappings
		name = "Fixed-point Number";
end_rule

rule 'createDate'
	from file f
	to kdm::code::DateType
	queries
	mappings
		name = "Date/Time";
end_rule

rule 'createBinary'
	from file f
	to kdm::code::BitstringType
	queries
	mappings
		name = "Binary String";
end_rule

rule 'createDataModel'
	from statements s
	to kdm::data::DataModel
	queries
		ddl : /s/#ddl_statements;
	mappings
		name = "Database";
		dataElement = ddl;
end_rule

rule 'createSchema'
	from ddl_statements ddl
	to kdm::data::RelationalSchema
	queries
		fname: //#file;
		ct : /ddl/#create_table;
		ci : /ddl/#create_index{!UNIQUE.exists};
		cui : /ddl/#create_index{UNIQUE.exists};
		cs : /ddl/#create_sequence;
		at : /ddl/#alter_table{ADD.exists};
		tblComments: /ddl/comment/#table_comment;
		colComments: /ddl/comment/#column_comment;
	mappings
		name = fname.filename;
		dataElement = ct;
		dataElement = execute mapIndex ci;
		dataElement = execute mapUniqueIndex cui;
		dataElement = execute mapSequence cs;
		dataElement = execute createAlterTables at;
		annotation = tblComments;
		annotation = colComments;
end_rule

rule 'mapColComment'
	from column_comment com
	to kdm::kdm::Annotation
	queries
	mappings
		text  = ext NodeToString(com);
end_rule

rule 'mapTblComment'
	from table_comment com
	to kdm::kdm::Annotation
	queries
		tableName : /com/#id[0];
	mappings
		text  = ext NodeToString(com, tableName);
end_rule

rule 'mapSequence'
	from create_sequence seq
	to kdm::data::SeqContent
	queries
		id : /seq/#id;
	mappings
		name  = id.STR;
end_rule

rule 'mapTables'
	from create_table ct
	to kdm::data::RelationalTable
	queries
		id : /ct/#id{STR.exists};
		id2 : /ct/#id{TEXT_TYPE.exists};
		pk: /ct//#primary_key;
		keys: /ct//#key;
		keyc: /ct//#key_constraint{PRIMARY.exists};
		fks: /ct//#key_constraint{FOREIGN.exists};
		ukeys: /ct//#unique_key;
		cols  : /ct//#column;
	mappings
		name  = id.STR;
		name  = id2.TEXT_TYPE;
		dataElement = pk;
		dataElement = keys;
		dataElement = ukeys;
		dataElement = keyc;
		itemUnit = cols;
		itemUnit = fks;
end_rule

rule 'createFK'
	from key_constraint fk
	to kdm::code::ItemUnit
	queries
		fkName: /fk/#id[0];
		affectedColName: /fk/target_cols/#id[0];
		affectedCol2Name: /fk/target_cols/#id[1];
		affectedCol3Name: /fk/target_cols/#id[2];
		affectedCol4Name: /fk/target_cols/#id[3];
		targetTable: /fk/#id[1];
		targetCol: /fk/reference_columns/#id[0];
		targetCol2: /fk/reference_columns/#id[2];
		targetCol3: /fk/reference_columns/#id[3];
		targetCol4: /fk/reference_columns/#id[4];
	mappings
		if (targetCol4.hasResults) then
			name  = ";DBLM_ADD:" + targetTable.STR + ",dataElement,*;;DBLM_ADD:" + targetTable.STR + "_" + targetCol.STR + ",dataElement,data:ReferenceKey,implementation,(" + targetCol.STR + " AND " + targetCol2.STR + " AND " + targetCol3.STR + " AND " + targetCol4.STR + "),itemUnit;;DBLM_ADD:" +targetTable.STR + "_" + targetCol.STR+ ",dataElement,data:KeyRelation,from," + targetTable.STR + "." + targetTable.STR + "_" + targetCol.STR + ",to,this." + fkName.STR  + ",dataElement;";
		else
			if (targetCol3.hasResults) then
				name  = ";DBLM_ADD:" + targetTable.STR + ",dataElement,*;;DBLM_ADD:" + targetTable.STR + "_" + targetCol.STR + ",dataElement,data:ReferenceKey,implementation,(" + targetCol.STR + " AND " + targetCol2.STR + " AND " + targetCol3.STR + "),itemUnit;;DBLM_ADD:" +targetTable.STR + "_" + targetCol.STR+ ",dataElement,data:KeyRelation,from," + targetTable.STR + "." + targetTable.STR + "_" + targetCol.STR + ",to,this." + fkName.STR  + ",dataElement;";
			else		
				if (targetCol2.hasResults) then
					name  = ";DBLM_ADD:" + targetTable.STR + ",dataElement,*;;DBLM_ADD:" + targetTable.STR + "_" + targetCol.STR + ",dataElement,data:ReferenceKey,implementation,(" + targetCol.STR + " AND " + targetCol2.STR + "),itemUnit;;DBLM_ADD:" +targetTable.STR + "_" + targetCol.STR+ ",dataElement,data:KeyRelation,from," + targetTable.STR + "." + targetTable.STR + "_" + targetCol.STR + ",to,this." + fkName.STR  + ",dataElement;";
				else
					name  = ";DBLM_ADD:" + targetTable.STR + ",dataElement,*;;DBLM_ADD:" + targetTable.STR + "_" + targetCol.STR + ",dataElement,data:ReferenceKey,implementation," + targetCol.STR + ",itemUnit;;DBLM_ADD:" +targetTable.STR + "_" + targetCol.STR+ ",dataElement,data:KeyRelation,from," + targetTable.STR + "." + targetTable.STR + "_" + targetCol.STR + ",to,this." + fkName.STR  + ",dataElement;";
				end_if
			end_if		
		end_if
end_rule

rule 'mapPK'
	from primary_key pk
	to kdm::data::UniqueKey
	queries
		col1 : /pk/#id[0];
		col2 : /pk/#id[1];
		col3 : /pk/#id[2];
		col4 : /pk/#id[3];
	mappings
		if (col4.hasResults) then
			name = "PrimaryKey" + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col4.STR + ",model.dataElement.dataElement.itemUnit;";
		else
			if (col3.hasResults) then
				name = "PrimaryKey" + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;";
			else
				if (col2.hasResults) then
					name = "PrimaryKey" + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;";
				else
					name = "PrimaryKey" + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  ";			
				end_if	
			end_if
		end_if
end_rule

rule 'mapKeyConstraint'
	from key_constraint pk
	to kdm::data::UniqueKey
	queries
		kname : /pk/#id[0];
		col1 : /pk/target_cols/#id[0];
		col2 : /pk/target_cols/#id[1];
		col3 : /pk/target_cols/#id[2];
		col4 : /pk/target_cols/#id[3];
	mappings
		if (col4.hasResults) then
			name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col4.STR + ",model.dataElement.dataElement.itemUnit;";
		else
			if (col3.hasResults) then
				name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;";
			else
				if (col2.hasResults) then
					name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;";
				else
					name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  ";			
				end_if	
			end_if
		end_if

end_rule

rule 'mapKey'
	from key k
	to kdm::data::UniqueKey
	queries
		kname : /k/#id[0];
		col1 : /k/#id[1];
		col2 : /k/#id[2];
		col3 : /k/#id[3];
		col4 : /k/#id[4];
	mappings
		if (col4.hasResults) then
			name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col4.STR + ",model.dataElement.dataElement.itemUnit;";
		else
			if (col3.hasResults) then
				name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;";
			else
				if (col2.hasResults) then
					name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;";
				else
					name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  ";			
				end_if	
			end_if
		end_if
end_rule

rule 'mapUKey'
	from unique_key k
	to kdm::data::UniqueKey
	queries
		kname : /k/#id[0];
		col1 : /k/#id[1];
		col2 : /k/#id[2];
		col3 : /k/#id[3];
		col4 : /k/#id[4];
	mappings
		if (col4.hasResults) then
			name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col4.STR + ",model.dataElement.dataElement.itemUnit;";
		else
			if (col3.hasResults) then
				name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col3.STR + ",model.dataElement.dataElement.itemUnit;";
			else
				if (col2.hasResults) then
					name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  " + ";DBLM_REF:implementation,this.this.this." + col2.STR + ",model.dataElement.dataElement.itemUnit;";
				else
					name = kname.STR + ";DBLM_REF:implementation,this.this.this." + col1.STR + ",model.dataElement.dataElement.itemUnit;  ";			
				end_if	
			end_if
		end_if
end_rule

rule 'createAlterTables'
	from alter_table at
	to kdm::data::RelationalTable
	queries
		tname: /at/#id[0];
		addPK: /at/#add{PRIMARY.exists};
		addFK: /at/#add{FOREIGN.exists};
		addUK:  /at/#add{UNIQUE.exists};
		isFormat1: /at/add/#id[1];
	mappings
		name  = ";DBLM_ADD:" + tname.STR + ",dataElement,*;";
		if (isFormat1.hasResults) then 
			itemUnit = execute alterColPK addPK;
		else
			itemUnit = execute alterColPK2 addPK;
		end_if
		itemUnit = execute alterColFK addFK;
		itemUnit = execute alterColUK addUK;
end_rule

rule 'alterColUK'
	from add addnode
	to kdm::code::ItemUnit
	queries
		affectedColName: /addnode/#id[1];
		pkName: /addnode/#id[0];
	mappings
		name  = ";DBLM_ADD:" + pkName.STR + ",dataElement,data:UniqueKey,implementation,"+ affectedColName.STR +",itemUnit;";
end_rule

rule 'alterColPK'
	from add addnode
	to kdm::code::ItemUnit
	queries
		affectedColName: /addnode/#id[1];
		pkName: /addnode/#id[0];
	mappings
		name  = ";DBLM_ADD:" + pkName.STR + ",dataElement,data:UniqueKey,implementation,"+ affectedColName.STR +",itemUnit;";
end_rule

rule 'alterColPK2'
	from add addnode
	to kdm::code::ItemUnit
	queries
		affectedColName: /addnode/#id[0];
	mappings
		name  = ";DBLM_ADD:PrimaryKey,dataElement,data:UniqueKey,implementation,"+ affectedColName.STR +",itemUnit;";
end_rule

rule 'alterColFK'
	from add addnode
	to kdm::code::ItemUnit
	queries
		name: /addnode/#id[0];
		fromCol: /addnode/#id[1];
		toTbl: /addnode/#id[2];
		toCol: /addnode/#id[3];
	mappings
		name  = ";DBLM_ADD:" + name.STR + ",dataElement,data:ReferenceKey,implementation," + fromCol.STR + ",itemUnit;;DBLM_ADD:" + name.STR + ",dataElement,data:KeyRelation,from," + fromCol.STR + ",to," + toTbl.STR + "." + toCol.STR + ",dataElement;";
end_rule



rule 'mapIndex'
	from create_index ci
	to kdm::data::IndexElement
	queries
		name : /ci/#id[0];
		table : /ci/#id[1];
		column : /ci/#id[2];
	mappings
		name = name.STR + ";DBLM_MOVE:" + table.STR + ",dataElement;" + ";DBLM_REF:implementation,this.this." + table.STR + "." + column.STR + ",model.dataElement.dataElement.itemUnit;";
end_rule

rule 'mapUniqueIndex'
	from create_index ci
	to kdm::data::UniqueKey
	queries
		name : /ci/#id[0]{STR.exists};
		pname: /ci/#id[0]{PRIMARY.exists};
		table : /ci/#id[1];
		column : /ci/#id[2];
	mappings
		if (name.hasResults) then
			name = name.STR + ";DBLM_MOVE:" + table.STR + ",dataElement;" + ";DBLM_REF:implementation,this.this." + table.STR + "." + column.STR + ",model.dataElement.dataElement.itemUnit;";		
		else
			name = pname.PRIMARY + ";DBLM_MOVE:" + table.STR + ",dataElement;" + ";DBLM_REF:implementation,this.this." + table.STR + "." + column.STR + ",model.dataElement.dataElement.itemUnit;";		
		end_if
		
end_rule

rule 'mapColumns'
	from column cols
	to kdm::code::ItemUnit
	queries
		id : /cols/#id;
		id2: /cols/#id{TEXT_TYPE.exists};
		stringType: /cols/#type{VARCHAR_TYPE.exists || VARCHAR2_TYPE.exists || TEXT_TYPE.exists || ENUM_TYPE.exists || CLOB_TYPE.exists};
		charType: /cols/#type{CHAR_TYPE.exists};
		decimalType:  /cols/#type{NUMBER_TYPE.exists || DECIMIAL_TYPE.exists};
		intType:  /cols/#type{INT_TYPE.exists};
		floatType:  /cols/#type{DOUBLE_TYPE.exists || FLOAT_TYPE.exists};
		bitStringType:  /cols/#type{BINARY_TYPE.exists || VARBINARY_TYPE.exists || BLOB_TYPE.exists};
		dateType: /cols/#type{DATETIME_TYPE.exists || TIMESTAMP_TYPE.exists || INTERVAL_TYPE.exists};
		seqType: /cols/#params{AUTO_INCREMENT.exists};
	mappings
		if(id2.hasResults) then
			if(stringType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Character String,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(stringType, 2);
			end_if
			if(charType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Character,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(charType, 2);
			end_if
			if(decimalType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Fixed-point Number,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(decimalType, 2);
			end_if
			if(intType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Integer,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(intType, 2);
			end_if
			if(floatType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Floating-point Number,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(floatType, 2);
			end_if
			if(bitStringType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Binary String,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(bitStringType, 2);
			end_if
			if(dateType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Date/Time,model.codeElement.codeElement;";
			end_if
			if(seqType.hasResults) then
				name = id.TEXT_TYPE + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Auto-Increment,model.codeElement.codeElement;";
			end_if
		else
			if(stringType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Character String,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(stringType, 2);
			end_if
			if(charType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Character,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(charType, 2);
			end_if
			if(decimalType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Fixed-point Number,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(decimalType, 2);
			end_if
			if(intType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Integer,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(intType, 2);
			end_if
			if(floatType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Floating-point Number,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(floatType, 2);
			end_if
			if(bitStringType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Binary String,model.codeElement.codeElement;";
				size = ext IntegerCastExtension(bitStringType, 2);
			end_if
			if(dateType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Date/Time,model.codeElement.codeElement;";
			end_if
			if(seqType.hasResults) then
				name = id.STR + ";DBLM_REF:type,Datatypes.Abstract SQL Types.Auto-Increment,model.codeElement.codeElement;";
			end_if
		end_if
end_rule

